

[스테이지 변수]
int? stageId; // 고정된 스테이지 key값.

string stageName;
string stageDescription;

int stageLength = 5; // 스테이지 방의 길이 (시작, 마지막 포함)
int MaxNodeCountByDepth = 3; // 스테이지 한스텝 최대 방의 개수
int? randomSeed = null; // 스테이지 시드 값
int lastRoomCount = 3; // 마지막 방 개수.
StageStateType state; // 방 상태 (성공/실패/중립)

[스테이지 구분]
퀘스트, 컨텐츠에 따라 구분.
시드값에 따라 맵, 이벤트, 적군 풀이 변경.
id값이 있는 스테이지는 고정된 정보를 가지고있다.
방 종류 -> 시작, 이벤트, 전투, 보스.
스테이지 결과를 위한 값으로 성공/중립/실패의 값을 방이 가지고 있다. (방 종류와는 별개) (state)
이벤트 방 종류 -> 휴식, 스토리, 정비, 이벤트
전투 방 -> 시드값의 종류에 따라 무작위로 선택 ex) 1번 시드에서는 전투 방 종류가 4종류.
보스 방 -> 시드값의 종류에 따라 무작위로 선택
마지막 방 -> lastRoomCount의 값만큼 마지막 방의 개수가 정해진다.


[스테이지 종류]
1. 정해진 데이터 스테이지 (스토리, 특정 퀘스트 등등)
2. 랜덤하게 생성되는 스테이지 (반복 퀘스트 등등)
3. 특정한 규칙을 가진 랜덤 스테이지 (특정 컨텐츠용 등등)


[스테이지 로직]
- 신규 스테이지 생성
1. 스테이지 선택(이름, 설명, 이미지, 길이, 최대 방 개수, 시드값)
2. 선택한 스테이지 정보에 따라 맵 Node(방) 구성
3. 구성된 방 종류에 따라 방 정보 구성

- 시드 스테이지 생성
1. stageId에 따라서 구성되어있는 스테이지 정보를 불러온다.

- 스테이지 이동
* 스테이지는 일방통행이다. (되돌아갈수없음)
* 현재 있는 방에서 연결되어있는 방으로만 이동할수있다.
* 다음으로 진행할 방을 누르면 카메라 포커스가 누른 방으로 잡히고 한번 더누르면 해당 방으로 진행.
* 스테이지 포기 / 스테이지 상태 저장후 메인으로 돌아가기 기능.

- 스테이지 상태
* 전투 또는 이벤트가 끝나면 해당 씬에서 결과를 받아와서 스테이지씬에서 처리.
	1. 전투, 이벤트들에서 처리된 캐릭터 상태를 확인 (+ 추가: 이펙트등 UI에 반영)
	2. 캐릭터가 전멸 한 경우 스테이지 실패. -> 결과화면으로
	3. 다음동작 진행
* 마지막 방 진행 완료. -> 결과 화면으로

- 진행상황 저장 / 저장된 정보 불러오기
* 진행중인 스테이지 정보는 단 하나만 저장된다. -> 여러 스테이지를 저장하고 '진행중'상태를 할수없다.
1. 방에 진입하기 전이 저장 타이밍. 현재 맵 정보, 맵에서의 위치, 현재 캐릭터 상태를 저장.
2. 저장은 자동저장이다.

- 저장된 정보 삭제
* 결과 로직이 완료된 후(서버통신 및 저장) 스테이지 정보 삭제(스테이지 초기화)

[랜덤 스테이지 규칙]
1. 스테이지 길이에서 첫번째는 시작 방, 마지막은 lastRoomCount만큼의 방에서 1개의 성공, 나머는 실패인 방들로 구성되어있다.
2. 마지막 깊이의 성공 방은 보스방이고 나머지 실패방들은 이벤트방이다. (스테이지의 보스방은 총 1개)
3. 마지막 깊이의 방들을 제외한 방들은 전부 '중립' 값이다.
4. 연결되지 않은 (고립된) 노드는 존재하면안된다.
5. 부모 노드 깊이 전체가 가질 수 있는 간선 수의 총합이 자식 노드 수 + 1개다.
6. 부모노드의 수가 간선수 제한보다 많아질 경우 간선수의 최대는 부모노드의 수가 된다.
